

# Mario Game DevSecOps Pipeline with GitOps

Welcome to the **Mario Game DevSecOps Pipeline** project! This project demonstrates an end-to-end DevSecOps pipeline using GitOps practices to secure, build, and deploy a containerized Mario Game application to Azure Kubernetes Service (AKS). Each stage is automated using GitHub Actions and ArgoCD, implementing security checks, containerization, and deployment.

---

## üìã Table of Contents
- [Goal](#goal)
- [Pipeline Overview](#pipeline-overview)
- [Prerequisites](#prerequisites)
- [Steps](#steps)
  - [Step 1: Code Changes and Commit to GitHub](#step-1-code-changes-and-commit-to-github)
  - [Step 2: GitHub Actions Workflow Execution](#step-2-github-actions-workflow-execution)
  - [Step 3: Static Application Security Testing (SAST) with SonarQube](#step-3-static-application-security-testing-sast-with-sonarqube)
  - [Step 4: Building the Docker Image](#step-4-building-the-docker-image)
  - [Step 5: Pushing Docker Image to DockerHub](#step-5-pushing-docker-image-to-dockerhub)
  - [Step 6: Updating Kubernetes Deployment with New Image Tag](#step-6-updating-kubernetes-deployment-with-new-image-tag)
  - [Step 7: ArgoCD Auto-Detection and Deployment](#step-7-argocd-auto-detection-and-deployment)
- [Final Verification](#final-verification)
- [Project Summary](#project-summary)

---

## üéØ Goal
To implement a DevSecOps pipeline that ensures secure, seamless deployment of the Mario Game application on AKS using GitOps and CI/CD best practices. 

## üöÄ Pipeline Overview
- **Version Control**: GitHub
- **Continuous Integration/Delivery**: GitHub Actions
- **Security Testing**: SonarQube for SAST
- **Container Registry**: DockerHub
- **Continuous Deployment**: ArgoCD on AKS

## üîß Prerequisites
1. **GitHub Repository** with `e2e-workflow.yaml` workflow file.
2. **SonarQube** instance for SAST.
3. **DockerHub** account for storing Docker images.
4. **ArgoCD** configured with access to the AKS cluster.
5. **AKS Cluster** for deploying the application.

---

## üìê Steps

### Step 1: Code Changes and Commit to GitHub
1. **Objective**: Modify Mario Game code to change controls (e.g., update to "S" key).
2. **Action**: Commit the modified code and push to the GitHub repository with the `e2e-workflow.yaml` file.
3. **Outcome**: GitHub Actions workflow is triggered upon commit.

### Step 2: GitHub Actions Workflow Execution
1. **Objective**: Automate the CI/CD pipeline.
2. **Action**: GitHub Actions automatically starts the workflow defined in `e2e-workflow.yaml`.
3. **Outcome**: Initiates SAST, build, and deployment steps.

### Step 3: Static Application Security Testing (SAST) with SonarQube
1. **Objective**: Perform security analysis of the code.
2. **Action**: SonarQube runs SAST checks via GitHub Actions.
3. **Outcome**: Detect and resolve any code vulnerabilities.

### Step 4: Building the Docker Image
1. **Objective**: Build a Docker image for the Mario Game with a unique tag.
2. **Action**: The workflow builds a Docker image using the updated code, tagging it dynamically (e.g., with timestamp or commit hash).
3. **Outcome**: The newly tagged image is prepared for deployment.

### Step 5: Pushing Docker Image to DockerHub
1. **Objective**: Publish the image to DockerHub for easy deployment.
2. **Action**: GitHub Actions pushes the image with its tag to DockerHub.
3. **Outcome**: The DockerHub repository contains the latest Mario Game image.

### Step 6: Updating Kubernetes Deployment with New Image Tag
1. **Objective**: Update the Kubernetes `deployment.yaml` file with the new Docker tag.
2. **Action**: Workflow updates the `deployment.yaml` file in GitHub, referencing the latest image tag.
3. **Outcome**: ArgoCD monitors the change and prepares to sync.

### Step 7: ArgoCD Auto-Detection and Deployment
1. **Objective**: ArgoCD detects and deploys the new image to AKS.
2. **Action**: After a 3-minute interval, ArgoCD syncs with the `deployment.yaml` file to deploy the updated image.
3. **Outcome**: The Mario Game application on AKS is updated with the latest code changes.

---

## ‚úÖ Final Verification
1. **LoadBalancer IP**: Retrieve the LoadBalancer IP from the ArgoCD UI.
2. **Access the Game**: Open your browser and enter `<LoadBalancer-IP>:8600`.
3. **Play Mario**: Verify the controls by pressing "S" to start the game.

---

## üìÑ Project Summary
This project demonstrates a robust DevSecOps pipeline utilizing GitOps principles. Each step automates security scanning, image building, and deployment, ensuring the Mario Game application is securely maintained and up-to-date on AKS.

---
